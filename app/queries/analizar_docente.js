var db = require('../models');
var sequelize = require("../models/sequelize.js");

exports.consultas = {
    encontrar_preguntas: function (docid, parid, asiid) {
        
        return sequelize
            .query("SELECT DISTINCT pr.PR_HORA_INICIO FROM TV_ASIGNATURA AS Asignatura INNER JOIN TV_PARALELO AS paralelo INNER JOIN TV_DOCENTE AS docente INNER JOIN TV_PREGUNTA_MAESTRA AS pregunta INNER JOIN TV_RESPUESTAS as res INNER JOIN TV_CLASE as clase INNER JOIN TV_PREGUNTA_REALIZADA as pr WHERE Asignatura.ASI_ID = paralelo.ASI_ID AND paralelo.TV_DOCENTE_DOC_ID = docente.DOC_ID AND paralelo.PAR_ID = pregunta.TV_PARALELO_PAR_ID AND res.PM_ID = pregunta.PM_ID AND clase.CLA_ID = pr.CLA_ID AND pregunta.PM_ID = pr.PM_ID AND docente.DOC_ID = ? AND paralelo.PAR_ID = ? AND asignatura.ASI_ID = ?  UNION SELECT DISTINCT pr.PR_HORA_INICIO  FROM TV_ASIGNATURA AS Asignatura INNER JOIN TV_PARALELO AS paralelo INNER JOIN TV_DOCENTE AS docente INNER JOIN TV_PREGUNTA_MAESTRA AS pregunta INNER JOIN TV_CLASE as clase INNER JOIN TV_PREGUNTA_REALIZADA as pr  WHERE Asignatura.ASI_ID = paralelo.ASI_ID AND paralelo.TV_DOCENTE_DOC_ID = docente.DOC_ID AND paralelo.PAR_ID = pregunta.TV_PARALELO_PAR_ID AND clase.CLA_ID = pr.CLA_ID AND pregunta.PM_ID = pr.PM_ID AND pregunta.PM_TIPO = '3' AND docente.DOC_ID = ? AND paralelo.PAR_ID = ? AND asignatura.ASI_ID = ?;", {replacements: [docid, parid, asiid, docid, parid, asiid], type: sequelize.QueryTypes.SELECT })
    },
    encontrar_datos_pregunta: function (docid, parid, asiid, prid) {
        
        return sequelize
      .query(
            "SELECT res.RES_TEXTO, res.PM_CORRECTA, Asignatura.ASI_CODIGO, Asignatura.ASI_NOMBRE, paralelo.PAR_ID, paralelo.PAR_NUMERO, docente.DOC_NOMBRE, pregunta.PM_NOMBRE, pregunta.PM_TEXTO, pregunta.PM_TIPO, pr.PR_HORA_INICIO, pr.PR_ID, pregunta.PM_RUTA_IMAGEN,  pregunta.PM_RUTA_VIDEO, pregunta.PM_EXPLICACION, pregunta.PM_RUTA_IMAGEN_EXPLICACION, pregunta.PM_ID, clase.CLA_FECHA_HORA_INICIO   FROM TV_ASIGNATURA AS Asignatura INNER JOIN TV_PARALELO AS paralelo INNER JOIN TV_DOCENTE AS docente INNER JOIN TV_PREGUNTA_MAESTRA AS pregunta INNER JOIN TV_RESPUESTAS as res INNER JOIN TV_CLASE as clase INNER JOIN TV_PREGUNTA_REALIZADA as pr WHERE Asignatura.ASI_ID = paralelo.ASI_ID AND paralelo.TV_DOCENTE_DOC_ID = docente.DOC_ID AND paralelo.PAR_ID = pregunta.TV_PARALELO_PAR_ID AND res.PM_ID = pregunta.PM_ID AND clase.CLA_ID = pr.CLA_ID AND pregunta.PM_ID = pr.PM_ID AND docente.DOC_ID = ? AND paralelo.PAR_ID = ? AND asignatura.ASI_ID = ? AND pr.PR_ID = ? UNION SELECT null, null, Asignatura.ASI_CODIGO, Asignatura.ASI_NOMBRE, paralelo.PAR_ID, paralelo.PAR_NUMERO, docente.DOC_NOMBRE, pregunta.PM_NOMBRE, pregunta.PM_TEXTO, pregunta.PM_TIPO, pr.PR_HORA_INICIO, pr.PR_ID, pregunta.PM_RUTA_IMAGEN, pregunta.PM_RUTA_VIDEO, pregunta.PM_EXPLICACION, pregunta.PM_RUTA_IMAGEN_EXPLICACION, pregunta.PM_ID, clase.CLA_FECHA_HORA_INICIO FROM TV_ASIGNATURA AS Asignatura INNER JOIN TV_PARALELO AS paralelo INNER JOIN TV_DOCENTE AS docente INNER JOIN TV_PREGUNTA_MAESTRA AS pregunta INNER JOIN TV_CLASE as clase INNER JOIN TV_PREGUNTA_REALIZADA as pr WHERE Asignatura.ASI_ID = paralelo.ASI_ID AND paralelo.TV_DOCENTE_DOC_ID = docente.DOC_ID AND paralelo.PAR_ID = pregunta.TV_PARALELO_PAR_ID AND clase.CLA_ID = pr.CLA_ID AND pregunta.PM_ID = pr.PM_ID AND pregunta.PM_TIPO = '3' AND docente.DOC_ID = ? AND paralelo.PAR_ID = ? AND asignatura.ASI_ID = ? AND pr.PR_ID = ?;", { replacements: [docid, parid, asiid, prid, docid, parid, asiid, prid], type: sequelize.QueryTypes.SELECT })
    },
    encontrar_preguntas_de_fecha: function (docid, parid, asiid, hora_inicio, hora_fin) {
        
        return sequelize
      .query("SELECT pr.PR_ID, pregunta.PM_NOMBRE FROM TV_ASIGNATURA AS Asignatura INNER JOIN TV_PARALELO AS paralelo INNER JOIN TV_DOCENTE AS docente INNER JOIN TV_PREGUNTA_MAESTRA AS pregunta INNER JOIN TV_RESPUESTAS as res INNER JOIN TV_CLASE as clase INNER JOIN TV_PREGUNTA_REALIZADA as pr WHERE Asignatura.ASI_ID = paralelo.ASI_ID AND paralelo.TV_DOCENTE_DOC_ID = docente.DOC_ID AND paralelo.PAR_ID = pregunta.TV_PARALELO_PAR_ID AND res.PM_ID = pregunta.PM_ID AND clase.CLA_ID = pr.CLA_ID AND pregunta.PM_ID = pr.PM_ID AND docente.DOC_ID = ? AND paralelo.PAR_ID = ? AND asignatura.ASI_ID = ? AND pr.PR_HORA_INICIO BETWEEN ? AND ? UNION SELECT pr.PR_ID, pregunta.PM_NOMBRE FROM TV_ASIGNATURA AS Asignatura INNER JOIN TV_PARALELO AS paralelo INNER JOIN TV_DOCENTE AS docente INNER JOIN TV_PREGUNTA_MAESTRA AS pregunta INNER JOIN TV_CLASE as clase INNER JOIN TV_PREGUNTA_REALIZADA as pr  WHERE Asignatura.ASI_ID = paralelo.ASI_ID AND paralelo.TV_DOCENTE_DOC_ID = docente.DOC_ID AND paralelo.PAR_ID = pregunta.TV_PARALELO_PAR_ID AND clase.CLA_ID = pr.CLA_ID AND pregunta.PM_ID = pr.PM_ID AND pregunta.PM_TIPO = '3' AND docente.DOC_ID = ? AND paralelo.PAR_ID = ? AND asignatura.ASI_ID = ? AND pr.PR_HORA_INICIO BETWEEN ? AND ?;", { replacements: [docid, parid, asiid, hora_inicio, hora_fin, docid, parid, asiid, hora_inicio, hora_fin], type: sequelize.QueryTypes.SELECT })
    },
encontrar_respuestas: function (prid) {
        return sequelize.query("SELECT pregres.RES_ID as respondida, res.RES_TEXTO as texto, pregres.EST_ID FROM TV_PREGUNTA_REALIZADA as pr INNER JOIN TV_PREGUNTA_RESPONDIDA as pregres INNER JOIN TV_PREGUNTA_MAESTRA as pregunta INNER JOIN TV_RESPUESTAS as res WHERE pregres.RES_ID=res.RES_ID AND pregres.PR_ID=pr.PR_ID AND pr.PM_ID=pregunta.PM_ID AND pr.PR_ID = ? AND pregunta.PM_TIPO<>'3' UNION SELECT pregres.PRES_LIKERT as respondida, null as texto,  pregres.EST_ID FROM TV_PREGUNTA_REALIZADA as pr INNER JOIN TV_PREGUNTA_RESPONDIDA as pregres INNER JOIN TV_PREGUNTA_MAESTRA as pregunta WHERE pregres.PR_ID=pr.PR_ID AND pr.PM_ID=pregunta.PM_ID AND pr.PR_ID = ? AND pregunta.PM_TIPO='3' ORDER BY respondida;", { replacements: [prid, prid], type: sequelize.QueryTypes.SELECT })
    }
}
